#!/usr/bin/env python3

# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Stephan Linz <linz@li-pro.net>

# NOTE: you need `pip3 install ascii_graph`

"""
Simple LED fade at Little Wire pin 1 (reverse on pin 4).
"""

import time
from sys import stderr, stdout

from ascii_graph import Pyasciigraph

from verylittlewire import device as vlwd


def cmpPWMAndMeasure(
    lw: vlwd.Device, cmpa: int, cmpb: int, adc: int, ms: int = 32
) -> None:
    lw.pwmUpdateCompare(cmpa, cmpb)

    if ms:

        mv = 0.0
        for m in range(ms):
            mv += (lw.analogRead(adc) * (5000.0)) / 1024.0
            time.sleep(1 / 1000)

        mv /= ms

        graph = Pyasciigraph()
        levels = [
            ("mV @ Vref", 5000.0),
            ("mV @ ADC_PIN2 (ADC1)", mv),
            ("compare (x10) @ PWM_PIN1 (PWMB)", cmpb * 10),
        ]
        for level in graph.graph("Voltage level:", levels):
            print(level, file=stdout)


try:

    # attach to the Little Wire
    lw = vlwd.Device()

    print("----------------------------------------------------------", file=stdout)
    print(
        "> Little Wire device found with serialNumber: " + lw.readSerialNumber(),
        file=stdout,
    )
    print("----------------------------------------------------------", file=stdout)
    print("> Little Wire firmware version: " + lw.readFirmwareVersion(), file=stdout)

    print("----------------------------------------------------------", file=stdout)
    print("Setup each known pin as input for safty operations.", file=stdout)
    for pin in [vlwd.PIN1, vlwd.PIN2, vlwd.PIN3, vlwd.PIN4]:
        lw.pinMode(pin, vlwd.INPUT)

    print("Press ctrl-c to exit.", file=stdout)
    lw.analogInit(vlwd.VREF_VCC)
    lw.pwmInit()
    lw.pwmUpdatePrescaler(vlwd.PWM_FREQ_PS0)  # fastest PWM frequency

    cmpa = cmpb = 0
    cntup = True

    while 1:
        try:

            if cntup and cmpb < 256 - 16:
                cmpa -= 16
                cmpb += 16

            elif not cntup and cmpb > 0:
                cmpa += 16
                cmpb -= 16

            elif cntup:
                cntup = False

            elif not cntup:
                cntup = True

            cmpPWMAndMeasure(lw, cmpa, cmpb, vlwd.ADC_PIN2)

        except KeyboardInterrupt:
            lw.pwmStop()
            break

except ValueError as ex:
    print(str(ex), file=stderr)


# vim: tw=80 ts=4 sw=4 sts=4 sta et ai nu
